trigger: none
pool:
  name: RHEL8_Servers
variables:
  - name: BuildAgentImage
    value: 'RHEL8_Servers'
  - name: JAVA_HOME
    value: /opt/app/jvm/jdk1.8.0_45
  - name: MAVEN_HOME
    value: /opt/citools/jenkins_unit/37d0742a/tools/hudson.tasks.Maven_MavenInstallation/MAVEN-3.8.8
  - name: M2_HOME
    value: /opt/citools/jenkins_unit/37d0742a/tools/hudson.tasks.Maven_MavenInstallation/MAVEN-3.8.8
  - name: SONAR_PROJECT_KEY
    value: volo
  - name: SONARQUBE_URL
    value: https://sonarqube.unit.voya.net

resources:
  repositories:
    - repository: sonartemplates
      type: git
      name: Workflowlib_Global_Template/DevOps_Global_Template
      ref: workflowlib
      
stages:
  - stage: Build
    jobs:
      - job: Build_Job
        workspace:
          clean: all
        steps:
          - checkout: self
            clean: true
            fetchDepth: 1
            
          - script: |
              echo "##vso[build.addbuildtag]volo-test123"
            displayName: 'Apply build tag'

          - task: replacetokens@6
            inputs:
              sources: '**/pom.xml'
              tokenPattern: custom
              tokenPrefix: '${'
              tokenSuffix: '}'
              missingVarLog: warn

          # First build the project
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests=true'
            displayName: 'Build project'

          # Then run SonarQube analysis
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.1.2184:sonar'
              options: |
                -Dsonar.projectKey=$(SONAR_PROJECT_KEY)
                -Dsonar.projectName=volo
                -Dsonar.host.url=$(SONARQUBE_URL)
                -Dsonar.login=$(SONAR_TOKEN)
                -Dsonar.java.binaries=target/classes
                -Dsonar.sourceEncoding=UTF-8
            displayName: 'Run SonarQube Analysis'
            env:
              SONAR_TOKEN: $(SONAR_TOKEN)

          # Wait for analysis to complete
          - script: |
              echo "Waiting 30 seconds for analysis to complete..."
              sleep 30
            displayName: 'Wait for analysis processing'

          # Check Quality Gate status
          - script: |
              MAX_RETRIES=5
              RETRY_DELAY=10
              retry_count=0
              
              while [ $retry_count -lt $MAX_RETRIES ]; do
                RESPONSE=$(curl -s -u "$(SONAR_TOKEN):" \
                  "$(SONARQUBE_URL)/api/qualitygates/project_status?projectKey=$(SONAR_PROJECT_KEY)")
                
                if echo "$RESPONSE" | jq -e '.projectStatus.status' > /dev/null; then
                  break
                fi
                
                echo "Analysis not ready yet, retrying in $RETRY_DELAY seconds..."
                retry_count=$((retry_count+1))
                sleep $RETRY_DELAY
              done
              
              echo "SonarQube Quality Gate Result: $RESPONSE"
              
              if ! echo "$RESPONSE" | jq -e '.projectStatus.status == "OK"' > /dev/null; then
                echo "##vso[task.logissue type=error]Quality Gate failed! Status: $(echo "$RESPONSE" | jq -r '.projectStatus.status')"
                echo "##vso[task.complete result=Failed;]"
                exit 1
              fi
              
              echo "Quality Gate passed!"
            displayName: 'Verify Quality Gate'
            env:
              SONAR_TOKEN: $(SONAR_TOKEN)

          # Publish artifacts
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(agent.builddirectory)
              Contents: '**/*.war'
              TargetFolder: $(build.artifactstagingdirectory)
              
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(build.artifactstagingdirectory)
              ArtifactName: drop
