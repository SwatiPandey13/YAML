trigger: none
pool:
  name: RHEL8_Servers
variables:
  - name: BuildAgentImage
    value: 'RHEL8_Servers'
  - name: JAVA_HOME
    value: /opt/app/jvm/jdk1.8.0_45
  - name: MAVEN_HOME
    value: /opt/citools/jenkins_unit/37d0742a/tools/hudson.tasks.Maven_MavenInstallation/MAVEN-3.8.8
  - name: M2_HOME
    value: /opt/citools/jenkins_unit/37d0742a/tools/hudson.tasks.Maven_MavenInstallation/MAVEN-3.8.8

resources:
  repositories:
    - repository: sonartemplates
      type: git
      name: Workflowlib_Global_Template/DevOps_Global_Template
      ref: workflowlib
      
stages:
  - stage: Build
    
    jobs:
      - job: Build_Job
        workspace:
          clean: all
        steps:
          - checkout: self
            clean: true
            fetchDepth: 1
          - script: |
              # last_scanned="last_scanned-$(date +%Y%m%d)"
              echo "##vso[build.addbuildtag]volo-test123"
            displayName: 'Apply build tag'

          - task: replacetokens@6
            inputs:
              sources: '**/pom.xml'
              tokenPattern: custom
              tokenPrefix: '${'
              tokenSuffix: '}'
              missingVarLog: warn

        
           #Trigger SonarQube analysis (using sonar-scanner CLI)
          - script: |
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

              # Install Node.js 20.x (LTS) without sudo
              nvm install 20
              node -v  # Verify

              # Install sonar-scanner globally (local to user)
              npm install -g sonar-scanner
              sonar-scanner --version
            displayName: "Install Node.js 20.x via nvm"

          # Check Quality Gate status (using curl)
          - script: |
              RESPONSE=$(curl -s -u "$(SONARQUBE_TOKEN):" \
                "$(SONARQUBE_URL)/api/qualitygates/project_status?projectKey=$(SONAR_PROJECT_KEY)")
              
              echo "SonarQube Quality Gate Result: $RESPONSE"
              
              # Fail pipeline if Quality Gate fails
              if ! echo "$RESPONSE" | jq -e '.projectStatus.status == "OK"' > /dev/null; then
                echo "##vso[task.logissue type=error]Quality Gate failed!"
                echo "##vso[task.complete result=Failed;]"
                exit 1
              fi
            displayName: "Verify Quality Gate"
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean verify'
              options: '-DskipTests=true'

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar'
              options: |
                -Dsonar.projectkey=volo
                -Dsonar.projectName=volo
                -Dsonar.host.url=https://sonarqube.unit.voya.net
                -Dsonar.login=sqa_e9da46b651a934d76dd10001ff73d06c84da6d89
          
          - task: SonarQubePublish@7
            inputs:
              pollingTimeoutSec: 600
          - task: CopyFiles@2
            inputs:
              SourceFolder: $(agent.builddirectory)
              Contents: '**/*.war'
              TargetFolder: $(build.artifactstagingdirectory)
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(build.artifactstagingdirectory)
              ArtifactName: drop

                    
