build.yml # resuable template

# Universal Build Template
parameters:
- name: buildTool
  type: string
  values: ['ant', 'maven', 'npm', 'golang', 'python3', 'dotnet']
  default: 'maven'

- name: javaVersion
  type: string
  default: '11'

- name: nodeVersion
  type: string
  default: '18.x'

- name: mavenGoals
  type: string
  default: 'clean package'

- name: npmScripts
  type: object
  default:
    install: 'install'
    build: 'build'
    test: 'test'

- name: buildArgs
  type: string
  default: ''

- name: contents
  type: string
  default: '**'

- name: image
  type: string
  default: ''
jobs:
- job: Build
  displayName: 'Build - ${{ parameters.buildTool }}'
  pool:
    name: $(BuildAgentImage)
  steps:
  - checkout: self
    submodules: true

  # ===== Tool Configuration =====
  - task: replacetokens@6
    inputs:
      sources: '**/pom.xml'
      tokenPattern: custom
      tokenPrefix: '${'
      tokenSuffix: '}'
      missingVarLog: warn  
      
  # ===== Tool Installation =====
  # - ${{ if contains('ant,maven', parameters.buildTool) }}:
  #   - task: JavaToolInstaller@0
  #     inputs:
  #       versionSpec: ${{ parameters.javaVersion }}
  #       jdkArchitectureOption: 'x64'

  - ${{ if eq(parameters.buildTool, 'npm') }}:
    - task: NodeTool@0
      inputs:
        versionSpec: ${{ parameters.nodeVersion }}

  # ===== Build Execution =====
  - ${{ if eq(parameters.buildTool, 'ant') }}:
    - script: |
        ant clean ${{ parameters.buildArgs }}
        ant jar ${{ parameters.buildArgs }}
      displayName: 'Ant Build'

  - ${{ if eq(parameters.buildTool, 'maven') }}:
    - script: |
        mvn clean package -DskipTests
      displayName: Build war with Maven
      workingDirectory: $(System.DefaultWorkingDirectory)

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: '${{ parameters.mavenGoals }}'
        options: '${{ parameters.buildArgs }}'

  - ${{ if eq(parameters.buildTool, 'npm') }}:
    - script: npm ${{ parameters.npmScripts.install }}
      displayName: 'npm install'
    - script: npm run ${{ parameters.npmScripts.build }}
      displayName: 'npm build'
    - script: npm run ${{ parameters.npmScripts.test }}
      displayName: 'npm test'
      condition: succeeded()

  - ${{ if eq(parameters.buildTool, 'golang') }}:
    - script: |
        go mod tidy
        go build -v ./...
        go test -coverprofile=coverage.out ./...
      displayName: 'Go Build'

  - ${{ if eq(parameters.buildTool, 'python3') }}:
    - script: |
        python -m pip install -r requirements.txt
        python -m pytest --cov=. --cov-report=xml:coverage.xml
      displayName: 'Python Build'

  - ${{ if eq(parameters.buildTool, 'dotnet') }}:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        arguments: '${{ parameters.buildArgs }}'
  

  - task: CopyFiles@2
    inputs:
      SourceFolder: $(agent.builddirectory)
      Contents: '${{ parameters.contents }}'
      TargetFolder: $(build.artifactstagingdirectory)
  
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: drop
      publishLocation: Container

  - ${{ if eq(parameters.image, 'podman') }}:
    - script: >
        podman login -u ${REG_CRED_USR} -p ${REG_CRED_PSW}
        ${DOCKER_REGISTRY}

        podman build -t "${DOCKER_REGISTRY}/volo_docker:ado_poc_v1" .
      displayName: Build podman
    - script: >
        podman push --format v2s1 --log-level=debug
        "${DOCKER_REGISTRY}/volo_docker:ado_poc_v1"

=====================================

sonarqube.yml # reusable template

parameters:
- name: jobName
  type: string
  default: 'SonarAnalysis'

- name: buildTool
  type: string
  values: ['ant', 'npm', 'maven', 'python3']

- name: additionalProps
  type: string
  default: ''

- name: mavenPomFile
  type: string
  default: 'pom.xml'

- name: javaBinariesPath
  type: string
  default: 'target/classes'

- name: sonarProjectKey
  type: string

- name: sonarHostUrl
  type: string

- name: sonarToken
  type: string

jobs:
- job: ${{ parameters.jobName }}
  pool:
    name: $(BuildAgentImage)
  steps:
  # - task: SonarQubePrepare@5
  #   inputs:
  #     SonarQube: 'SonarUnit'
  #     scannerMode: 'CLI'
  #     extraProperties: ${{ parameters.additionalProps }}
  - task: replacetokens@6
    inputs:
      sources: '**/pom.xml'
      tokenPattern: custom
      tokenPrefix: '${'
      tokenSuffix: '}'
      missingVarLog: warn  
      
  - task: Maven@3
    inputs:
      mavenPomFile: ${{ parameters.mavenPomFile }}
      goals: 'clean verify sonar:sonar'
      options: >
        -Dsonar.projectKey=$(SONAR_PROJECT_KEY)
        -Dsonar.projectName=$(SONAR_PROJECT_KEY)
        -Dsonar.host.url=$(SONARQUBE_URL)
        -Dsonar.login=$(SONARQUBE_TOKEN)
        -Dsonar.java.binaries=target/classes
        -Dsonar.sourceEncoding=UTF-8
        -Dsonar.scanner.metadata.skip=true
        -Dsonar.tests=.
        -Dsonar.test.inclusions=**/*None*
        -Dsonar.coverage.exclusions=**/*
        -Dsonar.junit.reportPaths=nonExistingfolder
        -Dsonar.jacoco.reportPaths=nonExistingfolder
        -Dsonar.skipDesign=true
        -Dmaven.test.skip=true   
        -DskipTests     
      publishJUnitResults: false
    displayName: 'Run SonarQube Analysis'
    env:
      SONAR_TOKEN: ${{ parameters.sonarToken }}
======================================================

Snyk.yml # reusable template
# Reusable Snyk Code Scan Template for Azure DevOps
parameters:
- name: snykDebugEnabled
  type: boolean
  default: false
- name: branchName
  type: string
  default: $(Build.SourceBranchName)
- name: repoName
  type: string
  default: $(Build.Repository.Name)
- name: buildTool
  type: string
  default: ''  # Optional: Set in calling pipeline
- name: platform
  type: string
  default: 'linux'

jobs:
- job: SnykCodeScan
  condition: and(succeeded(), ne(variables['SnykCompleted'], 'true'), not(startsWith(variables['Build.SourceBranch'], 'PR-')), not(startsWith(variables['Build.SourceBranch'], 'pilot')))
  steps:
  # - checkout: self
  #   clean: true

  - script: |
      echo "Starting cross-project checkout..."
      mkdir -p snyk-config
      cd snyk-config
      
      # Initialize with explicit authentication
      git init --initial-branch=main
      git config core.sparseCheckout true
      
      # Use full cross-project URL format
      git remote add origin "https://dev.azure.com/Voya-Projects/snyk-policy-config/_git/snyk-policy-config"
      
      echo "SAST_configs" > .git/info/sparse-checkout
      echo "SCA_configs" >> .git/info/sparse-checkout
      
      # Fetch with explicit authentication header
      git -c http.extraHeader="Authorization: Bearer 5r1LsLlDDfMenFD5Od8QbnuU1hLgqZxpSSntFgfndQWAzLEYOehQJQQJ99BEACAAAAAdXslUAAASAZDO1L1o" fetch --depth=1 origin main
      git checkout FETCH_HEAD
      
      # Copy files
      cp -r SAST_configs ../
      cp -r SCA_configs ../
    displayName: 'Cross-project Snyk config checkout'
    env:
      GIT_TERMINAL_PROMPT: 0




  # - script: |
  #     echo "Starting sparse checkout process..."
  #     mkdir -p snyk-config
  #     cd snyk-config
      
  #     # Initialize repo with debug output
  #     git init --initial-branch=main
  #     git config core.sparseCheckout true
      
  #     # Verify remote URL
  #     REMOTE_URL="$(System.TeamFoundationCollectionUri)_git/snyk-policy-config"
  #     echo "Using repository URL: $REMOTE_URL"
  #     git remote add origin "$REMOTE_URL"
      
  #     # Set up sparse checkout
  #     echo "Configuring sparse checkout paths..."
  #     echo "SAST_configs/" > .git/info/sparse-checkout
  #     echo "SCA_configs/" >> .git/info/sparse-checkout
      
  #     # Perform the pull with authentication and debug
  #     echo "Pulling files..."
  #     git -c http.extraHeader="Authorization: Bearer 6FNd7Q7SltNZ64aHHZgJeeoBIDJh11ywtFKdS84rhJx9Cd0n2jrbJQQJ99BEACAAAAAdXslUAAASAZDOxmbp" pull origin main --depth=1
      
  #     # Debug: Show pulled files
  #     echo "Contents after pull:"
  #     ls -la
      
  #     # Verify directories exist before copying
  #     if [ -d "./SAST_configs" ] && [ -d "./SCA_configs" ]; then
  #       echo "Copying config files..."
  #       cp -a ./SAST_configs ../
  #       cp -a ./SCA_configs ../
  #       echo "Copy completed successfully"
  #     else
  #       echo "##vso[task.logissue type=error]Required directories not found after pull!"
  #       echo "Current directory contents:"
  #       ls -la
  #       exit 1
  #     fi
  #   displayName: 'Sparse checkout via script'
  #   env:
  #     GIT_TERMINAL_PROMPT: 0
  # - script: |
  #     mkdir -p snyk-config
  #     cd snyk-config
  #     git init --initial-branch=main
  #     git config core.sparseCheckout true
  #     git remote add origin $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_git/snyk-policy-config
     
  #     echo "SAST_configs/" > .git/info/sparse-checkout
  #     echo "SCA_configs/" >> .git/info/sparse-checkout
  #     git -c http.extraHeader="Authorization: Bearer 6FNd7Q7SltNZ64aHHZgJeeoBIDJh11ywtFKdS84rhJx9Cd0n2jrbJQQJ99BEACAAAAAdXslUAAASAZDOxmbp pull origin main --depth=1"
  #     cp -a ./SAST_configs ../
  #     cp -a ./SCA_configs ../
  #   displayName: 'Sparse checkout via script'
  #   env:
  #     GIT_TERMINAL_PROMPT: 0  # Disable prompts

  # - checkout: git://Voya-Projects/snyk-policy-config@main
  #   path: snyk-policy-config
  #   fetch: 1
  #   lfs: false
  #   submodule: false
  #   persistCredentials: true
  #   sparseCheckoutPaths: |
  #     SAST_configs/
  #     SCA_configs/
  #   displayName: 'Checkout Snyk Config files'
  #   clean: true

  # - script: |
  #     ls -l snyk-config/SAST_configs
  #     ls -l snyk-config/SCA_configs
    
  #     cp -a snyk-config/SAST_configs .
  #     cp -a snyk-config/SCA_configs .

  #     rm -rf snyk-config
  #   displayName: 'Deploy Snyk config files'
  #   workingDirectory: $(Build.SourcesDirectory)

  # # Clone Snyk configs
  # - ${{ if eq(parameters.platform, 'linux') }}:
  #   - script: |
  #       mkdir -p snyk-config
  #       cd snyk-config
  #       git init
  #       git remote add origin -f https://Voya-Projects@dev.azure.com/Voya-Projects/snyk-policy-config/_git/snyk-policy-config
  #       git config core.sparseCheckout true
  #       echo "SAST_configs" > .git/info/sparse-checkout
  #       echo "SCA_configs" >> .git/info/sparse-checkout
  #       git pull origin main --depth=1
  #       cp -a ./SAST_configs ../
  #       cp -a ./SCA_configs ../
  #     displayName: 'Fetch Snyk Configs (Linux)'

  - ${{ if eq(parameters.platform, 'windows') }}:
    - powershell: |
        git clone --depth 1 https://Voya-Projects@dev.azure.com/Voya-Projects/snyk-policy-config/_git/snyk-policy-config
        Copy-Item -Path "snyk-policy-config/SAST_configs" -Destination "SAST_configs" -Recurse -Force
        Copy-Item -Path "snyk-policy-config/SCA_configs" -Destination "SCA_configs" -Recurse -Force
      displayName: 'Fetch Snyk Configs (Windows)'

  # Parse Snyk config
  - task: Bash@3
    name: ParseSnykConfig
    inputs:
      targetType: 'inline'
      script: |
        # Read config file

        # CONFIG_LINE=$(grep "${REPO_NAME}:" SAST_configs || echo "")
        
        CONFIG_LINE=$(grep "${REPO_NAME}:" SCA_configs || echo "")
        
        if [ -z "$CONFIG_LINE" ]; then
          echo "##vso[task.setvariable variable=SKIP_SNYK]true"
          echo "##vso[task.logissue type=warning]Snyk scan skipped - config not found for ${REPO_NAME}"
          exit 0
        fi

        IFS=':' read -ra CONFIG_PARTS <<< "$CONFIG_LINE"
        ORG_ID=${CONFIG_PARTS[1]}
        SEVERITY=${CONFIG_PARTS[2]}
        ENABLE_CLI=${CONFIG_PARTS[3]}
        IGNORE_FILES=${CONFIG_PARTS[4]}

        echo "##vso[task.setvariable variable=ORG_ID]$ORG_ID"
        echo "##vso[task.setvariable variable=SEVERITY]$SEVERITY"
        echo "##vso[task.setvariable variable=ENABLE_CLI]$ENABLE_CLI"
        echo "##vso[task.setvariable variable=IGNORE_FILES]$IGNORE_FILES"
    env:
      REPO_NAME: 'Volo' #${{ parameters.repoName }}

  # Skip if no config found
  - ${{ if eq(variables.SKIP_SNYK, 'true') }}:
    - script: echo "Snyk scan skipped - no configuration found"
      displayName: 'Skip Snyk Scan'

  # Run Snyk scan
  - ${{ if ne(variables.SKIP_SNYK, 'true') }}:
    - script: echo "Running Snyk with org_ID:" $(ORG_ID)
      displayName: 'Debug Snyk Setup'

    - task: SnykSecurityScan@1
      displayName: 'Snyk Code Scan'
      inputs:
        serviceConnectionEndpoint: 'SnykConnection'
        testType: 'code'
        severityThreshold: '$(SEVERITY)'
        monitorWhen: 'never'
        # failOnIssues: true
        projectName: 'Volo'
        # codeSeverityThreshold: 'medium'
        organization: '$(ORG_ID)'
        additionalArguments: '--json-file-output=report.json'
      env:
        SNYK_TOKEN: $(SNYK_AUTH_KEY)

    # Handle ignore files
    - ${{ if ne(variables.IGNORE_FILES, '') }}:
      - task: Bash@3
        displayName: 'Apply Snyk Ignore Rules'
        inputs:
          targetType: 'inline'
          script: |
            IFS=',' read -ra FILES_TO_IGNORE <<< "$(IGNORE_FILES)"
            for file in "${FILES_TO_IGNORE[@]}"; do
              snyk ignore --file-path="$file"
            done

    # Python-specific handling
    - ${{ if contains(parameters.buildTool, 'python') }}:
      - task: Bash@3
        displayName: 'Run Snyk for Python'
        inputs:
          targetType: 'inline'
          script: |
            snyk code test --command=python3 \
              --project-name=$(REPO_NAME)-$(BRANCH_NAME)-SnykCode \
              --org=$(ORG_ID) \
              --severity-threshold=$(SEVERITY)

    # Set completion flag
    - script: echo "##vso[task.setvariable variable=SnykCompleted]true"
      displayName: 'Mark Snyk Scan Complete'


===================================

main.yml # reusable template

parameters:
- name: poolName
  type: string
  default: 'RHEL8_Servers'

- name: buildTool
  type: string
  default: 'maven'

- name: mavenGoals
  type: string
  default: 'clean package'

- name: buildArgs
  type: string
  default: '-DskipTests=true'

- name: image
  type: string
  default: 'podman'

- name: mavenPomFile
  type: string
  default: 'pom.xml'

- name: snykDebugEnabled
  type: boolean
  default: false

- name: platform
  type: string
  default: 'linux'

- name: contents
  type: string
  default: '**/*.war'


jobs:
- job: BuildApp
  variables:
    - group: ArtifactorySettings
    - name: BuildAgentImage
      value: ${{ parameters.poolName }}
    - name: JAVA_HOME
      value: /opt/app/jvm/jdk-17
    - name: MAVEN_HOME
      value: /opt/citools/jenkins_unit/37d0742a/tools/hudson.tasks.Maven_MavenInstallation/MAVEN-3.8.8
    - name: M2_HOME
      value: /opt/citools/jenkins_unit/37d0742a/tools/hudson.tasks.Maven_MavenInstallation/MAVEN-3.8.8
- template: build.yml
  parameters:
    buildTool: 'maven'
    mavenGoals: 'clean package'
    buildArgs: '-DskipTests=true'
    image: 'podman'
    contents: '**/*.war'


- job: InitilizeAnalysis
  variables:
    - group: ArtifactorySettings
    - name: BuildAgentImage
      value: ${{ parameters.poolName }}
    - name: JAVA_HOME
      value: /opt/app/jvm/jdk-17
    - name: MAVEN_HOME
      value: /opt/citools/jenkins_unit/37d0742a/tools/hudson.tasks.Maven_MavenInstallation/MAVEN-3.8.8
    - name: M2_HOME
      value: /opt/citools/jenkins_unit/37d0742a/tools/hudson.tasks.Maven_MavenInstallation/MAVEN-3.8.8
  dependsOn: BuildApp
  steps:
  - script: echo "Preparaing SonarQube analysis environment"
    displayName: 'Analysis Initialization'
- template: sonar-analysis-template.yml
  parameters:
    buildTool: 'maven'
    mavenPomFile: 'pom.xml'
    sonarProjectKey: $(SONAR_PROJECT_KEY)
    sonarHostUrl: $(SONARQUBE_URL)
    sonarToken: $(SONARQUBE_TOKEN)



- job: SnyScan
  variables:
    - group: ArtifactorySettings
    - name: BuildAgentImage
      value: ${{ parameters.poolName }}
    - name: JAVA_HOME
      value: /opt/app/jvm/jdk-17
    - name: MAVEN_HOME
      value: /opt/citools/jenkins_unit/37d0742a/tools/hudson.tasks.Maven_MavenInstallation/MAVEN-3.8.8
    - name: M2_HOME
      value: /opt/citools/jenkins_unit/37d0742a/tools/hudson.tasks.Maven_MavenInstallation/MAVEN-3.8.8
- template: snyk-code-scan-template.yml
  parameters:
    snykDebugEnabled: false
    branchName: $(Build.SourceBranchName)
    repoName: $(Build.Repository.Name)
    buildTool: 'python'
    platform: 'linux'
