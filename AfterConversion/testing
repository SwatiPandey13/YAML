# Azure DevOps equivalent of your Jenkins Groovy script
parameters:
- name: jobName
  type: string
  default: 'SonarAnalysis'
- name: buildTool
  type: string
  values: ['ant', 'npm', 'golang', 'maven', 'maven3', 'python3']
- name: nodeVersion
  type: string
  default: '18.x'
- name: sonarDebugEnabled
  type: boolean
  default: false
- name: skipTests
  type: boolean
  default: true
- name: customJavaHome
  type: string
  default: ''

variables:
  isMacOS: $[ eq(variables['Agent.OS'], 'Darwin') ]
  jdkHome: $[ coalesce(parameters.customJavaHome, variables.isMacOS ? '/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home' : '/opt/app/jvm/jdk-17') ]
  sonarDebug: $[ eq(parameters.sonarDebugEnabled, true) ? '-X' : '' ]

jobs:
- job: ${{ parameters.jobName }}
  pool:
    vmImage: $(BuildAgentImage)
  steps:
  # ===== TOOL SETUP =====
  - ${{ if contains('ant,npm,maven,maven3,python3', parameters.buildTool) }}:
    - bash: echo "##vso[task.setvariable variable=JAVA_HOME]${{ variables.jdkHome }}"
      displayName: 'Set JAVA_HOME'

  - ${{ if eq(parameters.buildTool, 'npm') }}:
    - task: NodeTool@0
      inputs:
        versionSpec: ${{ format('{0}.x', gt(split(parameters.nodeVersion, '.')[0], 18) ? split(parameters.nodeVersion, '.')[0] : 18) }}

  # ===== SONARQUBE ANALYSIS =====
  - task: SonarQubePrepare@5
    inputs:
      SonarQube: 'SonarProd'
      scannerMode: 'CLI'
      configMode: 'manual'
      extraProperties: |
        sonar.projectName=$(Build.Repository.Name)
        sonar.projectKey=$(Build.Repository.Name)
        sonar.projectVersion=$(Build.SourceBranchName)-Build-$(Build.BuildNumber)
        sonar.scm.provider=git
        sonar.sourceEncoding=UTF-8
        javax.net.ssl.trustStore=/opt/citools/etc/cacerts.keystore
        ${{ variables.sonarDebug }}
        
        # Technology-specific properties
        ${{ if eq(parameters.buildTool, 'ant') }}:
        sonar.java.libraries=.
        sonar.java.binaries=**/target/classes/
        sonar.exclusions=**/com/voya/**/data/**,**/**/service/**
        
        ${{ if eq(parameters.buildTool, 'npm') }}:
        sonar.projectBaseDir=$(Build.SourcesDirectory)
        sonar.nodejs.executable=$(which node)
        
        ${{ if eq(parameters.buildTool, 'golang') }}:
        sonar.projectBaseDir=$(Build.SourcesDirectory)
        
        ${{ if or(eq(parameters.buildTool, 'maven'), eq(parameters.buildTool, 'maven3') }}:
        sonar.java.binaries=target/classes
        sonar.java.libraries=target/dependency/*
        
        ${{ if eq(parameters.buildTool, 'python3') }}:
        sonar.python.version=3.11
        sonar.exclusions=**/*.jsp,*/jsp,**/junit-reports/**,**/coverage-reports/**,**/dist/**,**/.pyenv*/**,**/target/**

  # ===== EXECUTION =====
  - ${{ if eq(parameters.buildTool, 'npm') }}:
    - bash: |
        if [ "$(Agent.OS)" != "Darwin" ] && [ -f "./coverage/lcov.info" ]; then
          sed -i "s|SF:$(pwd)/|SF:|g" ./coverage/lcov.info
        fi
        sonar-scanner
      displayName: 'Run NPM Analysis'

  - ${{ if or(eq(parameters.buildTool, 'maven'), eq(parameters.buildTool, 'maven3') }}:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar'
        options: '-Dmaven.test.skip=${{ parameters.skipTests }}'

  - ${{ if contains('ant,golang,python3', parameters.buildTool) }}:
    - script: sonar-scanner
      displayName: 'Run SonarScanner'

  # ===== QUALITY GATE =====
  - task: SonarQubePublish@5
    timeoutInMinutes: 9

---------------

resources:
  repositories:
    - repository: templates
      type: git
      name: MyOrg/azure-templates

variables:
  - name: BuildAgentImage
    value: 'ubuntu-latest'

stages:
- stage: Analyze
  jobs:
  - template: global-sonar-template.yml@templates
    parameters:
      jobName: 'FrontendAnalysis'
      buildTool: 'npm'
      nodeVersion: '16.x'
      sonarDebugEnabled: true
      additionalProps: |
        sonar.javascript.lcov.reportPaths=coverage/lcov.info
